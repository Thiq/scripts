var fs = require('fs');
var path = require('path');

var cachedProfiles = {};
var profileDir = './cached_profiles/';

function Profile(uuid) {
    this._uuid = uuid;
    if (cachedProfiles[uuid]) this._tables = cachedProfiles[uuid]._tables || {};
    else this._tables = {};
}

Profile.prototype.set = function(table, property, value) {
    if (!this._tables[table]) {
        this._tables[table] = {};
    }
    this._tables[table][property] = value;
    // save the profile
    this.save();
}

Profile.prototype.get = function(table, property) {
    if (!this._tables[table]) {
        return undefined;
    } else {
        return this._tables[table][property];
    }
}

Profile.prototype.save = function() {
    var path = getPathFor(this._uuid);
    cachedProfiles[this._uuid] = this;
    fs.writeFileSync(path, this._tables);
    return this;
}

Profile.prototype.load = function() {
    var path = getPathFor(this._uuid);
    var tables = JSON.parse(fs.readFileSync(path, {}) || {});
    this._tables = tables;
    cachedProfiles[this._uuid] = this;
    this.save();
    return this;
}

/**
 * 
 * @param {*} player The player object or UUID.
 * @returns {Profile}
 */
function getProfile(player) {
    if (player.getUniqueId) player = player.getUniqueId();
    player = player.toString(); // to ensure we don't stay with a UUID object
    var profile = cachedProfiles[player];
    if (!profile) {
        profile = new Profile(player);
        profile.save();
    }
    return profile;
}

function getPathFor(uuid) {
    return path.resolve([profileDir, uuid + '.json' ]);
}

eventHandler('player', 'join', function(e) {
    var player = e.player;
    var profile = new Profile(player).load();
    cachedProfiles[profile._uuid] = profile;
});

eventHandler('player', 'quit', function(e) {
    var profile = getProfile(e.getPlayer());
    profile.save();
});

var p = Bukkit.getOnlinePlayers();
for (let i = 0; i < p.length; i++) {
    new Profile(p[i].getUniqueId()).load();
}

module.exports = {
    Profile: Profile,
    getProfile: getProfile
}