import { QuestType } from './quest-actions';
import * as _ from 'underscore';

function getNpcRegistry() {
    return getPlugin('Citizens').getNPCRegistry();
}

function getNpcSpeech() {
    return getPlugin('Citizens').getSpeechFactory();
}

export class QuestTarget {
    type: TargetType;
    data: any;

    constructor(type: TargetType, data) {
        this.type = type;
        switch(type) {
            case TargetType.ENTITY:
                this.data = data.toString();
                break;
            case TargetType.BLOCK:
                if (data instanceof String) {
                    var id = data.split(':')[0].replace('-', '_').toUpperCase();
                    var md = parseInt(data.split(':')[1]);
                    this.data = { type: id,  data: md == NaN ? 0 : md };
                } else if (data instanceof org.bukkit.block.Block) {
                    // I'm going to hell for this line, I know it
                    this.data = { type: data.type, data: data.data || 0 };
                } else if (data instanceof Object) {
                    this.data = data;
                }
                break;
            case TargetType.ITEM:
                if (data instanceof String) {
                    var id = data.split(':')[0].replace('-', '_').toUpperCase();
                    var md = parseInt(data.split(':')[1]);
                    this.data = itemStack({ type: org.bukkit.Material.getMaterial(id), data: md });
                    // TODO: figure out how to get lore
                } else if (data instanceof org.bukkit.inventory.ItemStack) {
                    this.data = data;
                }
                break;
        }
    }

    isEqual(target): boolean {
        if (!target) return false;
        if (target === true) return true;
        switch(this.type) {
            case TargetType.ENTITY:
                // we have to use Citizens GUID of the entity to compare to
                return getNpcRegistry().getNPC(target).getUniqueId().toString() == this.data;
            case TargetType.BLOCK:
                // we have to assume that target is an instance of Block
                return this.data.type == target.type && (this.data.data || 0) == target.data;
            case TargetType.ITEM:
                // we have to assume that target is an instance of itemstack
                return this.data.type == target.type && (this.data.data || 0) == target.data;
            default: return false;
        }
    }
}

export enum TargetType {
    ENTITY,
    BLOCK,
    ITEM
}

export function getTargetTypeFromAction(action: QuestType): TargetType {
    switch(action) {
        case QuestType.BREAK:
        case QuestType.PLACE:
            return TargetType.BLOCK;
        case QuestType.BREED:
        case QuestType.LOCATE:
        case QuestType.KILL:
            return TargetType.ENTITY;
        case QuestType.COLLECT:
        case QuestType.CRAFT:
        case QuestType.SMELT:
            return TargetType.ITEM;
    }
}