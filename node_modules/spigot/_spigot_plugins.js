var pluginManager = Bukkit.getPluginManager();

/**
 * Gets the command with the specified name or alias.
 * @param {*} cmd 
 */
function getPluginCommand(cmd) {
    if (typeof cmd !== 'string') cmd = cmd.name;
    return Bukkit.getPluginCommand(cmd);
}

/**
 * Adds a permission to the plugin manager.
 * @param {*} permission 
 * @param {*} description
 */
function addPermission(permission, description) {
    if (typeof permission === 'string') permission = new org.bukkit.permissions.Permission(permission, description);
    pluginManager.addPermission(permission);
}

/**
 * Removes the permission from the plugin manager.
 * @param {*} permission 
 */
function removePermission(permission) {
    pluginManager.removePermission(permission);
}

/**
 * Disables the plugin specified.
 * @param {*} plugin The plugin or plugin name
 */
function disable(plugin) {
    plugin = get(plugin);
    pluginManager.disablePlugin(plugin);
}

/**
 * Enables the plugin specified.
 * @param {*} plugin The plugin or plugin name
 */
function enable(plugin) {
    plugin = get(plugin);
    pluginManager.enablePlugin(plugin);
}

/**
 * Returns if the plugin is enabled.
 * @param {*} plugin The plugin or plugin name
 */
function isEnabled(plugin) {
    return pluginManager.isPluginEnabled(plugin);
}

/**
 * Gets the plugin with the specified name.
 * @param {*} plugin The plugin or plugin name. Default value is 'Thiq'.
 */
function get(plugin) {
    plugin = plugin || 'Thiq';
    // yes this seems weird, but we're doing the check for other functions to use
    // where it's not guaranteed that plugin is a string
    if (typeof plugin === 'string') return pluginManager.getPlugin(plugin);
    else return plugin;
}

module.exports = {
    pluginManager,
    getPluginCommand,
    addPermission,
    removePermission,
    disable,
    enable,
    isEnabled,
    get
}